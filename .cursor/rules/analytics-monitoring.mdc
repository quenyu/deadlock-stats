# Analytics and Monitoring Standards

## Frontend Analytics
```typescript
interface ChartConfig {
  type: 'doughnut' | 'bar' | 'line';
  options: {
    responsive: boolean;
    maintainAspectRatio: boolean;
    cutout?: string;
    plugins: {
      legend: {
        position: 'bottom' | 'top' | 'left' | 'right';
        labels: {
          padding: number;
          font: {
            size: number;
          };
        };
      };
      tooltip: {
        callbacks: {
          label: (context: any) => string;
        };
      };
    };
  };
}
```

## Progress Visualization
```typescript
interface ProgressData {
  total: number;
  completed: number;
  remaining: number;
  percentage: number;
}

interface PhaseProgress {
  phaseId: string;
  tasks: {
    total: number;
    completed: number;
  };
  progress: number;
}
```

## Error Tracking (Sentry)
- Configure error boundaries
- Set up source maps
- Add user context
- Track performance
- Monitor releases

## Metrics Collection
- User engagement metrics
- Performance metrics
- Error rates
- API response times
- Resource usage

## Dashboard Components
```tsx
// Progress Chart Component
<div class="chart-container">
  <canvas id="progressChart"></canvas>
  <div class="metrics-grid">
    <MetricCard title="Всего Задач" value={total} />
    <MetricCard title="Выполнено" value={completed} />
    <MetricCard title="Осталось" value={remaining} />
    <MetricCard title="Прогресс" value={`${percentage}%`} />
  </div>
</div>
```

## Backend Monitoring
```go
type Metrics struct {
    RequestCount   int64
    ResponseTime   float64
    ErrorRate     float64
    CPUUsage      float64
    MemoryUsage   float64
}

type AnalyticsData struct {
    Period     string
    UserCount  int
    BuildCount int
    VoteCount  int
}
```
description:
globs:
alwaysApply: false
---
 